{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Codespaces What is Codespaces Codespaces is a tool created by School of Devops to simplify your learning environment setup and offers an IDE with integrated workspace, editor, terminal and nodes. Following digram is an example of a codespaces environment. Setting up Codespaces The easiest way to setup codespaces environment is by installing docker on your local system or even a remote server. Following section would point you to docker installation instructions. Docker Installation We assume that you have installed Docker-Engine and Docker-Compose in your machine. If not, please follow the below mentioned references to get started with Docker and Docker-Compose Installing Docker Desktop on Windows Installing Docker Desktop on Mac Docker-Engine Installation Guides for Linux Docker-Compose Installation Guides Setup Codespaces Repo Clone or download the codespaces-io repository by using either of the following commands Option 1 : Git Clone to clone using git, git clone https://github.com/codespaces-io/codespaces.git cd codespaces Option 2 : Zip File Download dont run this if cloned using above instructions to download a zip file wget https://github.com/codespaces-io/codespaces/archive/master.zip unzip master.zip cd codespaces-master Once cloned/unzipped, make sure you have change into the codespaces directory ( codespaces/codespaces-master) Setting up tool specific codespaces Ansible Codespace Setup","title":"Home"},{"location":"#codespaces","text":"","title":"Codespaces"},{"location":"#what-is-codespaces","text":"Codespaces is a tool created by School of Devops to simplify your learning environment setup and offers an IDE with integrated workspace, editor, terminal and nodes. Following digram is an example of a codespaces environment.","title":"What is Codespaces"},{"location":"#setting-up-codespaces","text":"The easiest way to setup codespaces environment is by installing docker on your local system or even a remote server. Following section would point you to docker installation instructions.","title":"Setting up Codespaces"},{"location":"#docker-installation","text":"We assume that you have installed Docker-Engine and Docker-Compose in your machine. If not, please follow the below mentioned references to get started with Docker and Docker-Compose Installing Docker Desktop on Windows Installing Docker Desktop on Mac Docker-Engine Installation Guides for Linux Docker-Compose Installation Guides","title":"Docker Installation"},{"location":"#setup-codespaces-repo","text":"Clone or download the codespaces-io repository by using either of the following commands Option 1 : Git Clone to clone using git, git clone https://github.com/codespaces-io/codespaces.git cd codespaces Option 2 : Zip File Download dont run this if cloned using above instructions to download a zip file wget https://github.com/codespaces-io/codespaces/archive/master.zip unzip master.zip cd codespaces-master Once cloned/unzipped, make sure you have change into the codespaces directory ( codespaces/codespaces-master)","title":"Setup Codespaces Repo"},{"location":"#setting-up-tool-specific-codespaces","text":"Ansible Codespace Setup","title":"Setting up tool specific codespaces"},{"location":"ansible/","text":"Setting up Codespaces IDE for Ansible After installing Docker-Engine and Docker-Compose, change directory into the corresponding tool you want to setup the environment for. cd cs-ansible Then all you need to do is to run docker-compose up -d This single command will initialize your Codespaces IDE. Use Codespaces IDE To use Codespaces IDE, Open your browser. Visit your machine's IP with port 8000. (Ex. http://192.168.0.60:8000 or http://localhost:8000) Now you will be presented with the Codespaces IDE console. Nodes Available Containers Purpose OS Port Exposed Host Port Mapped control Ansible Ubuntu 18.04 8000 8000 lb Load Balancer Centos 6.8 80 80 app1 App Server Centos 6.8 80 81 app2 App Server Centos 6.8 80 82 app3 App Server Ubuntu 16.04 80 83 db Database Centos 6.8 3306 3306 Adding Supporting Code To help you with the learning process, we have prepared a git repository with the supporting code. In order to use this code, you need to open a terminal, and clone the code from github as follows, From menu, select Terminal -> New Terminal From inside the terminal, use git clone command as demonstrated below git clone https://github.com/schoolofdevops/ansible-bootcamp-code.git Managing Environment Once created, you may want to stop the codespaces environment, or at times might have to recreate it completely, or reset a certain node. This section describes how to do so. Stopping codespaces environment If you would like to stop the environment created earlier, its as simple as the follows, run the following from your codespaces directory cd cs-ansible docker-compose stop The above command will shut down the containers/bring those to stopped state. You could easily start it all again, by running the following command from the same directory. cd cs-ansible docker-compose up -d Resetting the nodes/environment Since this is a docker based environment, its easy to rest a node, or even the complete environment. To reset a node, Find out the name of the node from docker-compose.yml e.g control: image: codespaces/ansible-control:v0.4.0 ports: - \"8000:8000\" volumes: - ./code:/workspace networks: custom: ipv4_address: 192.168.61.10 dns: 8.8.8.8 domainname: codespaces.io hostname: control restart: always lb: image: codespaces/ansible-node-centos-6:v0.3.6 ports: - \"80:80\" networks: custom: ipv4_address: 192.168.61.11 dns: 8.8.8.8 domainname: codespaces.io hostname: lb restart: always In the above snippet of node, there are two nodes viz control and lb You could alternately use the following command to find the node name docker-compose ps Once you decide which node you are resetting, run the following command to redo it. I am taking an example of a node by name lb e.g. docker-compose stop lb docker-compose rm lb docker-compose up -d lb Replace the name of actual node with lb. That should help you redo the node To reset the complete environment, docker-compose down docker-compose up -d The above command will recreate the nodes, without deleting your workspaces. Any files that you had created would still be available after you re launch the environment.","title":"Setting up Ansible Codespace"},{"location":"ansible/#setting-up-codespaces-ide-for-ansible","text":"After installing Docker-Engine and Docker-Compose, change directory into the corresponding tool you want to setup the environment for. cd cs-ansible Then all you need to do is to run docker-compose up -d This single command will initialize your Codespaces IDE.","title":"Setting up  Codespaces IDE for Ansible"},{"location":"ansible/#use-codespaces-ide","text":"To use Codespaces IDE, Open your browser. Visit your machine's IP with port 8000. (Ex. http://192.168.0.60:8000 or http://localhost:8000) Now you will be presented with the Codespaces IDE console.","title":"Use Codespaces IDE"},{"location":"ansible/#nodes-available","text":"Containers Purpose OS Port Exposed Host Port Mapped control Ansible Ubuntu 18.04 8000 8000 lb Load Balancer Centos 6.8 80 80 app1 App Server Centos 6.8 80 81 app2 App Server Centos 6.8 80 82 app3 App Server Ubuntu 16.04 80 83 db Database Centos 6.8 3306 3306","title":"Nodes Available"},{"location":"ansible/#adding-supporting-code","text":"To help you with the learning process, we have prepared a git repository with the supporting code. In order to use this code, you need to open a terminal, and clone the code from github as follows, From menu, select Terminal -> New Terminal From inside the terminal, use git clone command as demonstrated below git clone https://github.com/schoolofdevops/ansible-bootcamp-code.git","title":"Adding Supporting Code"},{"location":"ansible/#managing-environment","text":"Once created, you may want to stop the codespaces environment, or at times might have to recreate it completely, or reset a certain node. This section describes how to do so.","title":"Managing Environment"},{"location":"ansible/#stopping-codespaces-environment","text":"If you would like to stop the environment created earlier, its as simple as the follows, run the following from your codespaces directory cd cs-ansible docker-compose stop The above command will shut down the containers/bring those to stopped state. You could easily start it all again, by running the following command from the same directory. cd cs-ansible docker-compose up -d","title":"Stopping codespaces environment"},{"location":"ansible/#resetting-the-nodesenvironment","text":"Since this is a docker based environment, its easy to rest a node, or even the complete environment. To reset a node, Find out the name of the node from docker-compose.yml e.g control: image: codespaces/ansible-control:v0.4.0 ports: - \"8000:8000\" volumes: - ./code:/workspace networks: custom: ipv4_address: 192.168.61.10 dns: 8.8.8.8 domainname: codespaces.io hostname: control restart: always lb: image: codespaces/ansible-node-centos-6:v0.3.6 ports: - \"80:80\" networks: custom: ipv4_address: 192.168.61.11 dns: 8.8.8.8 domainname: codespaces.io hostname: lb restart: always In the above snippet of node, there are two nodes viz control and lb You could alternately use the following command to find the node name docker-compose ps Once you decide which node you are resetting, run the following command to redo it. I am taking an example of a node by name lb e.g. docker-compose stop lb docker-compose rm lb docker-compose up -d lb Replace the name of actual node with lb. That should help you redo the node To reset the complete environment, docker-compose down docker-compose up -d The above command will recreate the nodes, without deleting your workspaces. Any files that you had created would still be available after you re launch the environment.","title":"Resetting the nodes/environment"},{"location":"puppet/","text":"Setting up Codespaces IDE for puppet After installing Docker-Engine and Docker-Compose, change directory into the corresponding tool you want to setup the environment for. cd cs-puppet Then all you need to do is to run docker-compose up -d This single command will initialize your Codespaces IDE. Use Codespaces IDE To use Codespaces IDE, Open your browser. Visit your machine's IP with port 8000. (Ex. http://192.168.0.60:8000 or http://localhost:8000) Now you will be presented with the Codespaces IDE console. Nodes Available Containers Purpose OS Port Exposed Host Port Mapped puppet puppet Ubuntu 18.04 8000,80 8000,80 node1 Load Balancer Centos 6.8 80 81 node2 App Server Centos 6.8 80 82 node3 App Server Centos 6.8 80 83 node4 Database Centos 6.8 3306,80 3306,84 Managing Environment Once created, you may want to stop the codespaces environment, or at times might have to recreate it completely, or reset a certain node. This section describes how to do so. Stopping codespaces environment If you would like to stop the environment created earlier, its as simple as the follows, run the following from your codespaces directory cd cs-puppet docker-compose stop The above command will shut down the containers/bring those to stopped state. You could easily start it all again, by running the following command from the same directory. cd cs-puppet docker-compose up -d Resetting the nodes/environment Since this is a docker based environment, its easy to rest a node, or even the complete environment. To reset a node, Find out the name of the node from docker-compose.yml e.g services: puppet: image: codespaces/puppet-master:2.0.0 ports: - \"8000:8000\" - \"80:80\" environment: JAVA_ARGS: \"-Xms256m -Xmx256m -XX:MaxPermSize=256m\" volumes: - workspace:/workspace networks: - puppet container_name: puppet domainname: codespaces.io hostname: puppet restart: always node1: image: codespaces/puppet-node-centos-6:v0.1.3 ports: - \"81:80\" networks: - puppet container_name: node1 domainname: codespaces.io hostname: node1 restart: always In the above snippet of node, there are two nodes viz puppet and node1 You could alternately use the following command to find the node name docker-compose ps Once you decide which node you are resetting, run the following command to redo it. I am taking an example of a node by name node1 e.g. docker-compose stop node1 docker-compose rm node1 docker-compose up -d node1 Replace the name of actual node with lb. That should help you redo the node To reset the complete environment, docker-compose down docker-compose up -d The above command will recreate the nodes, without deleting your workspaces. Any files that you had created would still be available after you re launch the environment.","title":"Setting up Puppet Codespace"},{"location":"puppet/#setting-up-codespaces-ide-for-puppet","text":"After installing Docker-Engine and Docker-Compose, change directory into the corresponding tool you want to setup the environment for. cd cs-puppet Then all you need to do is to run docker-compose up -d This single command will initialize your Codespaces IDE.","title":"Setting up  Codespaces IDE for puppet"},{"location":"puppet/#use-codespaces-ide","text":"To use Codespaces IDE, Open your browser. Visit your machine's IP with port 8000. (Ex. http://192.168.0.60:8000 or http://localhost:8000) Now you will be presented with the Codespaces IDE console.","title":"Use Codespaces IDE"},{"location":"puppet/#nodes-available","text":"Containers Purpose OS Port Exposed Host Port Mapped puppet puppet Ubuntu 18.04 8000,80 8000,80 node1 Load Balancer Centos 6.8 80 81 node2 App Server Centos 6.8 80 82 node3 App Server Centos 6.8 80 83 node4 Database Centos 6.8 3306,80 3306,84","title":"Nodes Available"},{"location":"puppet/#managing-environment","text":"Once created, you may want to stop the codespaces environment, or at times might have to recreate it completely, or reset a certain node. This section describes how to do so.","title":"Managing Environment"},{"location":"puppet/#stopping-codespaces-environment","text":"If you would like to stop the environment created earlier, its as simple as the follows, run the following from your codespaces directory cd cs-puppet docker-compose stop The above command will shut down the containers/bring those to stopped state. You could easily start it all again, by running the following command from the same directory. cd cs-puppet docker-compose up -d","title":"Stopping codespaces environment"},{"location":"puppet/#resetting-the-nodesenvironment","text":"Since this is a docker based environment, its easy to rest a node, or even the complete environment. To reset a node, Find out the name of the node from docker-compose.yml e.g services: puppet: image: codespaces/puppet-master:2.0.0 ports: - \"8000:8000\" - \"80:80\" environment: JAVA_ARGS: \"-Xms256m -Xmx256m -XX:MaxPermSize=256m\" volumes: - workspace:/workspace networks: - puppet container_name: puppet domainname: codespaces.io hostname: puppet restart: always node1: image: codespaces/puppet-node-centos-6:v0.1.3 ports: - \"81:80\" networks: - puppet container_name: node1 domainname: codespaces.io hostname: node1 restart: always In the above snippet of node, there are two nodes viz puppet and node1 You could alternately use the following command to find the node name docker-compose ps Once you decide which node you are resetting, run the following command to redo it. I am taking an example of a node by name node1 e.g. docker-compose stop node1 docker-compose rm node1 docker-compose up -d node1 Replace the name of actual node with lb. That should help you redo the node To reset the complete environment, docker-compose down docker-compose up -d The above command will recreate the nodes, without deleting your workspaces. Any files that you had created would still be available after you re launch the environment.","title":"Resetting the nodes/environment"}]}